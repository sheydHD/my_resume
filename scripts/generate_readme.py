#!/usr/bin/env python3
"""
Dynamic README generator for CV repository.
Automatically generates README.md based on available PNG files and repository structure.
"""

import os
import glob
import re
from pathlib import Path

def get_png_files():
    """Get all PNG files from the attachments/png directory."""
    png_dir = Path("attachments/png")
    if not png_dir.exists():
        return []
    
    png_files = list(png_dir.glob("*.png"))
    # Sort by name to ensure consistent order
    png_files.sort()
    return png_files

def get_pdf_files():
    """Get all PDF files from the template_2/out directory."""
    pdf_dir = Path("template_2/out")
    if not pdf_dir.exists():
        return []
    
    pdf_files = list(pdf_dir.glob("*.pdf"))
    return pdf_files

def generate_page_description(filename):
    """Generate a description for each CV page based on filename."""
    base_name = filename.stem
    
    # Map filenames to descriptions
    descriptions = {
        "output-page-0": "Personal Information & Summary",
        "output-page-1": "Skills & Work Experience", 
        "output-page-2": "Languages, Education & Interests",
        "output-page-3": "Publications & Personal Projects",
        "output-page-4": "Additional Information",
        "output-page-5": "Extended Details"
    }
    
    # Try to match with known patterns
    for pattern, desc in descriptions.items():
        if base_name.startswith(pattern):
            return desc
    
    # For other files, generate a generic description
    if "page" in base_name:
        page_num = re.search(r'page-(\d+)', base_name)
        if page_num:
            return f"CV Page {int(page_num.group(1)) + 1}"
    
    return "CV Content"

def generate_readme_content():
    """Generate the complete README content."""
    
    # Header
    content = """# Antoni Dudij - CV/Resume

<div align="center">

## üìÑ CV Pages

"""
    
    # Add PNG images dynamically
    png_files = get_png_files()
    
    # Filter for output-page files and sort them
    page_files = [f for f in png_files if "output-page" in f.name]
    page_files.sort(key=lambda x: int(re.search(r'page-(\d+)', x.name).group(1)) if re.search(r'page-(\d+)', x.name) else 0)
    
    for png_file in page_files:
        relative_path = png_file.relative_to(Path("."))
        description = generate_page_description(png_file)
        content += f"![{description}]({relative_path})\n"
        content += f"*{description}*\n\n"
    
    # Add other PNG files if they exist
    other_png_files = [f for f in png_files if "output-page" not in f.name]
    if other_png_files:
        content += "## üñºÔ∏è Additional Images\n\n"
        for png_file in other_png_files:
            relative_path = png_file.relative_to(Path("."))
            content += f"![{png_file.stem}]({relative_path})\n"
            content += f"*{png_file.stem}*\n\n"
    
    # Repository structure
    content += """---

## üìÅ Repository Structure

This repository contains my professional CV/Resume in multiple formats:

"""
    
    # Add LaTeX templates
    content += "- **LaTeX source files** (`template_1/` and `template_2/`)\n"
    
    # Add PDF files dynamically
    pdf_files = get_pdf_files()
    if pdf_files:
        content += "- **PDF output** (`template_2/out/`)\n"
        for pdf_file in pdf_files:
            relative_path = pdf_file.relative_to(Path("."))
            content += f"  - [`{pdf_file.name}`]({relative_path})\n"
    
    # Add PNG files info
    if png_files:
        content += f"- **PNG previews** (`attachments/png/`) - {len(png_files)} files\n"
    
    # Add modules info
    modules_dir = Path("modules")
    if modules_dir.exists():
        module_files = list(modules_dir.glob("*.tex"))
        if module_files:
            content += f"- **LaTeX modules** (`modules/`) - {len(module_files)} component files\n"
    
    # Footer
    content += """
---

## üîÑ Auto-Update

This README is automatically generated by GitHub Actions whenever the CV is updated.
The system detects changes in PNG files and automatically regenerates this documentation.

</div>
"""
    
    return content

def main():
    """Main function to generate and write README."""
    print("üîÑ Generating README.md...")
    
    # Generate content
    content = generate_readme_content()
    
    # Write to README.md
    with open("README.md", "w", encoding="utf-8") as f:
        f.write(content)
    
    print("‚úÖ README.md generated successfully!")
    print(f"üìä Found {len(get_png_files())} PNG files")
    print(f"üìÑ Found {len(get_pdf_files())} PDF files")

if __name__ == "__main__":
    main()
